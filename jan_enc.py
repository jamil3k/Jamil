#__________________| INFO |___________________#
#______SCRIPT ENCRYPTED BY PYTHON 3.0
#______CODING BY: MEHEDI
#______TELEGRAM : https://t.me/lokmanvau
#________________| SCRIPT DATA |_____________#

import base64
exec(base64.b64decode(b'CmltcG9ydCBvcywgc3lzLCByZSwgcmVxdWVzdHMsIGJzNCwgdGltZSwgcmFuZG9tLCBqc29uLCBzdHJpbmcKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKdHJ5OgogICAgaW1wb3J0IHJlcXVlc3RzCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMgPiAvZGV2L251bGwnKQp0cnk6CiAgICBpbXBvcnQgYnM0CmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHByaW50ICgnXG4gW8OXXSBNb2R1bCBCczQgTm90IGluc3RhbGxlZCEuLi5cbicpCiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIGJzNCcpCmRlZiBjb252ZXJ0KGNvayk6CiAgICBfX2ZvciA9ICdkYXRyPScgKyBjb2tbJ2RhdHInXSArICc7JyArICgnc2I9JyArIGNva1snc2InXSkgKyAnOycgKyAoJ2ZyPScgKyBjb2tbJ2ZyJ10pICsgJzsnICsgKCdjX3VzZXI9JyArIGNva1snY191c2VyJ10pICsgJzsnICsgKCd4cz0nICsgY29rWyd4cyddKQogICAgcmV0dXJuIF9fZm9yCmRlZiBpbmJveChzZXNzaW9uKToKICAgIHRpbWUuc2xlZXAoMSkKICAgIHNlcyA9IHJlcXVlc3RzLlNlc3Npb24oKQogICAgX18gPSBzdHIodGltZS50aW1lKCkpLnJlcGxhY2UoJy4nLCAnJylbOjEzXQogICAgZGF0YSA9IHNlcy5nZXQoZiJodHRwczovLzEwbWludXRlbWFpbC5uZXQvYWRkcmVzcy5hcGkucGhwP3Nlc3Npb25pZD17c2Vzc2lvbn0mXz17c3RyKF9fKX0iKS5qc29uKCkKICAgIGlmIGxlbihkYXRhWyJtYWlsX2xpc3QiXSkgIT0xOgogICAgICAgIGFkZHJlc3MgPSBkYXRhWyJtYWlsX2xpc3QiXVswXVsic3ViamVjdCJdCiAgICAgICAgc2Vzc2lvbiA9IGFkZHJlc3MucmVwbGFjZSgnRkItJywgJycpLnJlcGxhY2UoJ2lzIHlvdXIgRmFjZWJvb2sgY29uZmlybWF0aW9uIGNvZGUnLCAnJykKICAgICAgICByZXR1cm4gc2Vzc2lvbgp1Z2VuPVtdCgpmb3IgeCBpbiByYW5nZSg1MDAwKToKICAgIGFhPSdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQnCiAgICBiPXJhbmRvbS5jaG9pY2UoWyc2JywnNycsJzgnLCc5JywnMTAnLCcxMScsJzEyJ10pCiAgICBjPSdLKScKICAgIGQ9cmFuZG9tLmNob2ljZShbJ0EnLCdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSicsICdLJywgJ0wnLCAnTScsICdOJywgJ08nLCAnUCcsICdRJywgJ1InLCAnUycsICdUJywgJ1UnLCAnVicsICdXJywgJ1gnLCAnWScsICdaJ10pCiAgICBlPXJhbmRvbS5yYW5kcmFuZ2UoMSwgOTk5KQogICAgZj1yYW5kb20uY2hvaWNlKFsnQScsJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJywgJ0snLCAnTCcsICdNJywgJ04nLCAnTycsICdQJywgJ1EnLCAnUicsICdTJywgJ1QnLCAnVScsICdWJywgJ1cnLCAnWCcsICdZJywgJ1onXSkKICAgIGc9J0FwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8nCiAgICBoPXJhbmRvbS5yYW5kcmFuZ2UoNzMsMTAwKQogICAgaT0nMCcKICAgIGo9cmFuZG9tLnJhbmRyYW5nZSg0MjAwLDQ5MDApCiAgICBrPXJhbmRvbS5yYW5kcmFuZ2UoNDAsMTUwKQogICAgbD0nTW9iaWxlIFNhZmFyaS81MzcuMzYnCiAgICB1YWt1Mj1mJ3thYX0ge2J9OyB7Y317ZH17ZX17Zn0pIHtnfXtofS57aX0ue2p9LntrfSB7bH0nCiAgICB1Z2VuLmFwcGVuZCh1YWt1MikKCnN5cy5zdGRvdXQud3JpdGUoJ1x4MWJdMjs88J+SmuC8uiDwkoac8J2Zs/Cdmoct8J2ZufCdmbDwnZm88J2ZuPCdmbsg8JKGnCDgvLvwn5KaPlx4MDcnKQpkZWYgY2xlYXIoKTpvcy5zeXN0ZW0oJ2NsZWFyJyk7cHJpbnQobG9nbykKZGVmIGxpbmV4KCk6cHJpbnQoZid7Un3ilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEnKQoKQlU9ICdcMDMzWzE7MzRtJztBID0gJ1x4MWJbMTs5N20nO1IgPSAnXHgxYlszODs1OzE5Nm0nO1kgPSAnXDAzM1sxOzMzbSc7RyA9ICdceDFiWzM4OzU7NDZtJztCID0gJ1x4MWJbMzg7NTs0Nm0nO0cxID0gJ1x4MWJbMzg7NTs0OG0nO0cyID0gJ1x4MWJbMzg7NTs0N20nO0czID0gJ1x4MWJbMzg7NTs0OG0nO0c0ID0gJ1x4MWJbMzg7NTs0OW0nO0c1ID0gJ1x4MWJbMzg7NTs1MG0nO1ggPSAnXDMzWzE7MzRtJztYMSA9ICdceDFiWzM4OzU7MTRtJztYMiA9ICdceDFiWzM4OzU7MTIzbSc7WDMgPSAnXHgxYlszODs1OzEyMm0nO1g0ID0gJ1x4MWJbMzg7NTs4Nm0nO1g1ID0gJ1x4MWJbMzg7NTsxMjFtJztTID0gJ1x4MWJbMTs5Nm0nO00gPSAnXHgxYlszODs1OzIwNW0nCgpsb2dvNCA9ZiIiIlx4MWJbMTs5MW0K4pWU4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB8J2Zs/Cdmoct8J2ZufCdmbDwnZm88J2ZuPCdmbvilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilZcKICDilojilojilojilojilojiloggIOKWiOKWiCAgIOKWiOKWiCAgICAgIOKWiOKWiCAg4paI4paI4paI4paI4paIICDilojilojiloggICAg4paI4paI4paIIOKWiOKWiCDilojiloggICAgICAK4paI4paIICAg4paI4paIICDilojilogg4paI4paIICAgICAgIOKWiOKWiCDilojiloggICDilojilogg4paI4paI4paI4paIICDilojilojilojilogg4paI4paIIOKWiOKWiCAgICAgIArilojiloggICDilojiloggICDilojilojiloggICAgICAgIOKWiOKWiCDilojilojilojilojilojilojilogg4paI4paIIOKWiOKWiOKWiOKWiCDilojilogg4paI4paIIOKWiOKWiCAgICAgIArilojiloggICDilojiloggIOKWiOKWiCDilojiloggIOKWiOKWiCAgIOKWiOKWiCDilojiloggICDilojilogg4paI4paIICDilojiloggIOKWiOKWiCDilojilogg4paI4paIICAgICAgCuKWiOKWiOKWiOKWiOKWiOKWiCAg4paI4paIICAg4paI4paIICDilojilojilojilojiloggIOKWiOKWiCAgIOKWiOKWiCDilojiloggICAgICDilojilogg4paI4paIIOKWiOKWiOKWiOKWiOKWiOKWiOKWiCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogCuKVmuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeC8uiDwkoac8J2Zs/Cdmoct8J2ZufCdmbDwnZm88J2ZuPCdmbsg8JKGnCDgvLvilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilZ0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcMDMzWzkybQpceDFiWzE7OTJt4pWU4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pWXIApceDFiWzE7OTFtW1xcXVx4MWJbMTs5N20gVGhpcyBUb29scyBEZWNvZGUgQnkg4Ly6IPCShpzwnZmz8J2ahy3wnZm58J2ZsPCdmbzwnZm48J2ZuyDwkoacIOC8uwpceDFiWzE7OTFtW1xcXSBceDFiWzE7OTdtVXBkYXRlIGJ5IOC8uiDwkoac8J2Zs/Cdmoct8J2ZufCdmbDwnZm88J2ZuPCdmbsg8JKGnCDgvLsKXHgxYlsxOzkxbVtcXF0gXHgxYlsxOzk3bUNvZGVyIE5hbWUgPiBBbWVyIApceDFiWzE7OTFtW1xcXVx4MWJbMTs5N20gVG9vbCBUeXBlIEZyZWUKXHgxYlsxOzkxbVtcXF0gXHgxYlsxOzk3bVRvb2wgVmFyc29uIDogMC4xClx4MWJbMTs5Mm3ilZrilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilZ0iIiIKCmJveSA9IFsiTWVoZWRpIEhhc2FuIiwiQXJpZiBSYWhtYW4iLCJBc2lmIEFobWVkIiwiQmFzaGlyIENob3dkaHVyeSIsIkJpbm9kIFNhcmtlciIsIlJhZmlxIE1pYWgiLCJNb2hhbW1hZCBLaGFuIiwiTWFobXVkIEFsaSIsIk1haGluIElzbGFtIiwiTWFzdWQgSG9zc2FpbiIsIk11c3RhZmEgVWRkaW4iLCJNb2hpdWRkaW4gQmh1aXlhbiIsIk5vb3IgS2hhbiIsIk5hc2lyIEFobWVkIiwiTnVydWwgSGFxdWUiLCJSYWppYiBTaWRkaXF1ZSIsIlJlemF1bCBJc2xhbSIsIlJpeWFkIFJhaG1hbiIsIlNhYmJpciBNaWEiLCJTYWRpayBDaG93ZGh1cnkiLCJTYW1zdWRkaW4gTW9sbGFoIiwiU2VsaW0gU2Fya2VyIiwiU2hhaGlkIEhvc3NhaW4iLCJTaGFmaWsgQWhtZWQiLCJTaGFtcyBVZGRpbiIsIlNoYWhpbiBBbGFtIiwiVGFudmVlciBLaGFuIiwiVG91aGlkIEhvc3NhaW4iLCJJcWJhbCBSYWhtYW4iLCJKYWZhciBNaWEiLCJKZXdlbCBTaWRkaXF1ZSIsIlppYXVyIElzbGFtIl0KZ2lybCA9IFsiQml0aGkgQWt0YXIiLCJNb21lbmEgQmVndW0iLCJSb2tleWEgU3VsdGFuYSIsIkZhdGVtYSBBbndhciIsIlN1bHRhbmEgS2FtYWwiLCJKYWhhbmFyYSBBbGFtIiwiUnVtYSBBa3RlciIsIkZhcnphbmEgWWFzbWluIiwiU2FsbWEgQmVndW0iLCJOdXNyYXQgSmFoYW4iLCJTaGFoZWVuIEFrdGVyIiwiU2FicmluYSBTdWx0YW5hIiwiUHVybmltYSBSb3kiLCJTaGlyaW4gQWt0ZXIiLCJKYW5uYXR1bCBGZXJkb3VzIiwiTW91c3VtaSBQYXJ2ZWVuIiwiUmluYSBCZWd1bSIsIkxhaWxhIElzbGFtIiwiUnViaW5hIFN1bHRhbmEiLCJOaWdhciBTdWx0YW5hIiwiU2hhbWltYSBOYXNyaW4iLCJEaWxydWJhIFN1bHRhbmEiLCJLaGF0dW4gQmVndW0iLCJGYXJpaGEgUmFobWFuIiwiS2F6aSBSdXBhIiwiTWFyaWFtIEJlZ3VtIiwiU2VsaW5hIEFrdGVyIiwiTmFiaWxhIFJhaG1hbiIsIlNhZGlhIElzbGFtIiwiUnVtYW5hIEFrdGVyIiwiU3VtaSBBa3RlciIsIkhlbmEgU3VsdGFuYSJdCm9rID0gW10KY3AgPSBbXQoKZGVmIG1lbnUoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgKGxvZ280KQogICAgcHJpbnQgKGYne0F9W3tSfTF7QX1dIHtHfUFVVE8gQ1JFQVRFICcpCiAgICBwcmludCAoZid7QX1be1J9MntBfV0ge0d9Q09OVEFDVCBBRE1JTiAnKQogICAgbGluZXgoKQogICAgc2VsID0gaW5wdXQoZid7QX1be1J9PXtBfV0ge0d9SU5QVVQge1J9Pj57QX0gJykKICAgIGlmIHNlbCBpblsnMScsICcwMSddOgogICAgICAgIGNyZWF0ZSgpLnN0YXJ0KCkKICAgIGVsaWYgc2VsIGluIFsnMicsICcwMiddOgogICAgICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2FyaXlhbi5zYWp1LjM5JykKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgKGYne0F9W3tSfT17QX1dIHtHfVNFTEVDVCBWQUxJRCBPUFRJT04nKQogICAgICAgIHRpbWUuc2xlZXAoMykKICAgICAgICBtZW51KCkKY2xhc3MgY3JlYXRlOgoJCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5sb29wID0gMAogICAgICAgIHNlbGYuZ2VuZGVyID0gW10KI+KWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWreKWrOKWrVsgU0VJRiBd4pas4pat4pas4pat4pas4pat4pas4pat4pas4pat4pas4pat4pas4pat4pas4patIyAgICAgICAgCiAgICBkZWYgc3RhcnQoc2VsZik6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgcHJpbnQgKGxvZ280KQogICAgICAgIHByaW50IChmJ3tBfVt7Un09e0F9XSB7R31CT1lTIE5BTUUgSURTJykKICAgICAgICBwcmludCAoZid7QX1be1J9PXtBfV0ge0d9R0lSTFMgTkFNRSBJRFMnKQogICAgICAgIGxpbmV4KCkKICAgICAgICBnZW4gPSBpbnB1dChmJ3tBfVt7Un09e0F9XSB7R31JTlBVVCB7Un0+PntBfScpCiAgICAgICAgbGluZXgoKQogICAgICAgIGlmIGdlbiBpbiBbJzEnLCAnMDEnXToKICAgICAgICAgICAgc2VsZi5nZW5kZXIuYXBwZW5kKCdib3knKQogICAgICAgIGVsaWYgZ2VuIGluIFsnMicsICcwMiddOgogICAgICAgICAgICBzZWxmLmdlbmRlci5hcHBlbmQoJ2dpcmwnKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlbGYuZ2VuZGVyLmFwcGVuZCgnYm95JykKCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgcHJpbnQgKGxvZ280KQogICAgICAgIHByaW50KGYne0F9W3tSfT17QX1dIHtHfUVYQU1QTEUge0F9OntHM30gMzAwMHtBfS97RzN9NTAwMHtBfS97RzN9MTAwMDB7QX0ve0czfTk5OTk5Jyk7bGluZXgoKQogICAgICAgIGxpbSA9IGludChpbnB1dChmJ3tBfVt7Un09e0F9XSB7R31JTlBVVCB7Un0+PntBfSAgJykpCiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgcHJpbnQgKGxvZ280KQogICAgICAgIGFnZW50ID0gcmFuZG9tLmNob2ljZSh1Z2VuKQoKICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAnYXV0aG9yaXR5JzogJ20uZmFjZWJvb2suY29tJywKICAgICAgICAgICAgJ2FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjcnLAogICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44JywKICAgICAgICAgICAgJ3NlYy1jaC1wcmVmZXJzLWNvbG9yLXNjaGVtZSc6ICdsaWdodCcsCiAgICAgICAgICAgICdzZWMtY2gtdWEnOiAnIk5vdDpBLUJyYW5kIjt2PSI5OSIsICJDaHJvbWl1bSI7dj0iMTEyIicsCiAgICAgICAgICAgICdzZWMtY2gtdWEtZnVsbC12ZXJzaW9uLWxpc3QnOiAnIk5vdDpBLUJyYW5kIjt2PSI5OS4wLjAuMCIsICJDaHJvbWl1bSI7dj0iMTEyLjAuNTYxNS4xMzciJywKICAgICAgICAgICAgJ3NlYy1jaC11YS1tb2JpbGUnOiAnPzEnLAogICAgICAgICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJyJBbmRyb2lkIicsCiAgICAgICAgICAgICdzZWMtY2gtdWEtcGxhdGZvcm0tdmVyc2lvbic6ICciMTEuMC4wIicsCiAgICAgICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsCiAgICAgICAgICAgICdzZWMtZmV0Y2gtbW9kZSc6ICduYXZpZ2F0ZScsCiAgICAgICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdub25lJywKICAgICAgICAgICAgJ3NlYy1mZXRjaC11c2VyJzogJz8xJywKICAgICAgICAgICAgJ3VwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMnOiAnMScsCiAgICAgICAgICAgICd1c2VyLWFnZW50JzogYWdlbnQsCiAgICAgICAgICAgICd2aWV3cG9ydC13aWR0aCc6ICc5ODAnLH0KICAgICAgICBoZWFkZXJzMSA9IHsKICAgICAgICAgICAgJ2F1dGhvcml0eSc6ICdtLmZhY2Vib29rLmNvbScsCiAgICAgICAgICAgICdhY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC43JywKICAgICAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1HQixlbi1VUztxPTAuOSxlbjtxPTAuOCcsCiAgICAgICAgICAgICdzZWMtY2gtcHJlZmVycy1jb2xvci1zY2hlbWUnOiAnbGlnaHQnLAogICAgICAgICAgICAnc2VjLWNoLXVhJzogJyJOb3Q6QS1CcmFuZCI7dj0iOTkiLCAiQ2hyb21pdW0iO3Y9IjExMiInLAogICAgICAgICAgICAnc2VjLWNoLXVhLWZ1bGwtdmVyc2lvbi1saXN0JzogJyJOb3Q6QS1CcmFuZCI7dj0iOTkuMC4wLjAiLCAiQ2hyb21pdW0iO3Y9IjExMi4wLjU2MTUuMTM3IicsCiAgICAgICAgICAgICdzZWMtY2gtdWEtbW9iaWxlJzogJz8xJywKICAgICAgICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciQW5kcm9pZCInLAogICAgICAgICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtLXZlcnNpb24nOiAnIjExLjAuMCInLAogICAgICAgICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZW1wdHknLAogICAgICAgICAgICAnc2VjLWZldGNoLW1vZGUnOiAnY29ycycsCiAgICAgICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLW9yaWdpbicsCiAgICAgICAgICAgICd1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzJzogJzEnLAogICAgICAgICAgICAndXNlci1hZ2VudCc6IGFnZW50LH0KICAgICAgICBPTyA9ICdcMDMzWzA7OTdtJwogICAgICAgIGZvciB4IGluIHJhbmdlKGxpbSk6CiAgICAgICAgICAgIHNlbGYubG9vcCArPSAxCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcclxye0F9W3tHfeC8uiDwkoac8J2Zs/Cdmoct8J2ZufCdmbDwnZm88J2ZuPCdmbsg8JKGnCDgvLstQVVUT3tBfV0gPj4ge0F9W3tSfXtzZWxmLmxvb3B9e0F9XXtSfSA+PiB7QX1be0d9T0t7QX3igKJ7R317bGVuKG9rKX17QX1dJykKICAgICAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpCiAgICAgICAgICAgIGlmICdib3knIGluIHNlbGYuZ2VuZGVyOgogICAgICAgICAgICAgICAgbmFtZSA9IHJhbmRvbS5jaG9pY2UoYm95KS5zcGxpdCgnICcpCiAgICAgICAgICAgICAgICBzZXggPSAnMicKICAgICAgICAgICAgZWxpZiAnZ2lybCcgaW4gc2VsZi5nZW5kZXI6CiAgICAgICAgICAgICAgICBuYW1lID0gcmFuZG9tLmNob2ljZShnaXJsKS5zcGxpdCgnICcpCiAgICAgICAgICAgICAgICBzZXggPSAnMScKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VzID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgICAgICAgICBidWlsZHNlcyA9IHVzZXIgPSAiIi5qb2luKHJhbmRvbS5TeXN0ZW1SYW5kb20oKS5jaG9pY2UoInF3ZXJ0eXVpb3Bhc2RmZ2hqa2x6eGN2Ym5tMDk4NzY1NDMyMSIpIGZvciBpIGluIHJhbmdlKDI2KSkKICAgICAgICAgICAgICAgIGNyZWF0ZSA9IHNlcy5nZXQoZiJodHRwczovLzEwbWludXRlbWFpbC5uZXQvYWRkcmVzcy5hcGkucGhwP25ldz0xJnNlc3Npb25pZD17YnVpbGRzZXN9Jl89e2ludChkYXRldGltZS5ub3coKS50aW1lc3RhbXAoKSAqIDEwMDApfSIpLmpzb24oKQogICAgICAgICAgICAgICAgbWFpbCA9IHsibWFpbCI6IGNyZWF0ZVsicGVybWFsaW5rIl1bIm1haWwiXSwgInNlc3Npb24iOiBjcmVhdGVbInNlc3Npb25faWQiXX0KICAgICAgICAgICAgICAgIGVtYWlsID0gbWFpbFsnbWFpbCddCiAgICAgICAgICAgICAgICBzZXNzaW9uID0gbWFpbFsnc2Vzc2lvbiddCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOgogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgIHBhc3N3ID0gbmFtZVswXStuYW1lWzFdK3N0cihyYW5kb20ucmFuZGludCgxMTEsOTk5KSkKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgc2VsZi5zZXMgPSByZXF1ZXN0cy5TZXNzaW9uKCkKICAgICAgICAgICAgICAgIGEgPSBzZWxmLnNlcy5nZXQoJ2h0dHBzOi8vbS5mYWNlYm9vay5jb20vcmVnP19mYl9ub3NjcmlwdCcsIGhlYWRlcnM9aGVhZGVycykKICAgICAgICAgICAgICAgIGxvZ2VyID0gcmUuc2VhcmNoKCduYW1lPSJsb2dnZXJfaWQiIHZhbHVlPSIoLio/KSInLCBzdHIoYS50ZXh0KSkuZ3JvdXAoMSkKICAgICAgICAgICAgICAgIHJlZiA9IEJlYXV0aWZ1bFNvdXAoYS50ZXh0LCAnaHRtbC5wYXJzZXInKS5maW5kKCdmb3JtJywgeydhY3Rpb24nOiBUcnVlLCAiaWQiOiJtb2JpbGUtcmVnLWZvcm0iLCAibWV0aG9kIjoicG9zdCJ9KQogICAgICAgICAgICAgICAgYmwgPSBbJ2xzZCcsICdqYXpvZXN0JywgJ2NwcCcsICdyZWdfaW5zdGFuY2UnLCAnc3VibWlzc2lvbl9yZXF1ZXN0J10KICAgICAgICAgICAgICAgIGJ6ID0gWydyZWdfaW1wcmVzc2lvbl9pZCcsICducyddCiAgICAgICAgICAgICAgICBzZWxmLmRhdGEgPSB7fQogICAgICAgICAgICAgICAgZm9yIHYgaW4gcmVmKCdpbnB1dCcpOgogICAgICAgICAgICAgICAgICAgIGlmIHYuZ2V0KCduYW1lJykgaW4gYmw6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS51cGRhdGUoe3YuZ2V0KCduYW1lJyk6di5nZXQoJ3ZhbHVlJyl9KQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBzZWxmLmRhdGEudXBkYXRlKHsnaGVscGVyJzogJyd9KQogICAgICAgICAgICAgICAgZm9yIHYgaW4gcmVmKCdpbnB1dCcpOgogICAgICAgICAgICAgICAgICAgIGlmIHYuZ2V0KCduYW1lJykgaW4gYno6CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZGF0YS51cGRhdGUoe3YuZ2V0KCduYW1lJyk6di5nZXQoJ3ZhbHVlJyl9KQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBzZWxmLmRhdGEudXBkYXRlKHsKICAgICAgICAgICAgICAgICAgICAiemVyb19oZWFkZXJfYWZfY2xpZW50IjogIiIsCiAgICAgICAgICAgICAgICAgICAgImFwcF9pZCI6ICIxMDMiLAogICAgICAgICAgICAgICAgICAgICJsb2dnZXJfaWQiOiByZS5zZWFyY2goJ25hbWU9ImxvZ2dlcl9pZCIgdmFsdWU9IiguKj8pIicsIHN0cihhLnRleHQpKS5ncm91cCgxKSwKICAgICAgICAgICAgICAgICAgICAiZmllbGRfbmFtZXNbMF0iOiAiZmlyc3RuYW1lIiwKICAgICAgICAgICAgICAgICAgICAiZmlyc3RuYW1lIjogbmFtZVswXSwKICAgICAgICAgICAgICAgICAgICAibGFzdG5hbWUiOiBuYW1lWzFdLAogICAgICAgICAgICAgICAgICAgICJmaWVsZF9uYW1lc1sxXSI6ICJiaXJ0aGRheV93cmFwcGVyIiwKICAgICAgICAgICAgICAgICAgICAiYmlydGhkYXlfZGF5Ijogc3RyKHJhbmRvbS5yYW5kaW50KDEsMjgpKSwKICAgICAgICAgICAgICAgICAgICAiYmlydGhkYXlfbW9udGgiOiBzdHIocmFuZG9tLnJhbmRpbnQoMSwxMikpLAogICAgICAgICAgICAgICAgICAgICJiaXJ0aGRheV95ZWFyIjogc3RyKHJhbmRvbS5yYW5kaW50KDE5OTIsMjAwNCkpLAogICAgICAgICAgICAgICAgICAgICJhZ2Vfc3RlcF9pbnB1dCI6ICIiLAogICAgICAgICAgICAgICAgICAgICJkaWRfdXNlX2FnZSI6ICIiLAogICAgICAgICAgICAgICAgICAgICJmaWVsZF9uYW1lc1syXSI6ICJyZWdfZW1haWxfXyIsCiAgICAgICAgICAgICAgICAgICAgInJlZ19lbWFpbF9fIjogZW1haWwsCiAgICAgICAgICAgICAgICAgICAgImZpZWxkX25hbWVzWzNdIjogInNleCIsCiAgICAgICAgICAgICAgICAgICAgInNleCI6IHNleCwKICAgICAgICAgICAgICAgICAgICAicHJlZmVycmVkX3Byb25vdW4iOiAiIiwKICAgICAgICAgICAgICAgICAgICAiY3VzdG9tX2dlbmRlciI6ICIiLAogICAgICAgICAgICAgICAgICAgICJmaWVsZF9uYW1lc1tdIjogInJlZ19wYXNzd2RfXyIsCiAgICAgICAgICAgICAgICAgICAgInJlZ19wYXNzd2RfXyI6IHBhc3N3LAogICAgICAgICAgICAgICAgICAgICJzdWJtaXQiOiAiU2lnbiBVcCIsCiAgICAgICAgICAgICAgICAgICAgIm5hbWVfc3VnZ2VzdF9lbGlnIjogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAid2FzX3Nob3duX25hbWVfc3VnZ2VzdGlvbnMiOiAiZmFsc2UiLAogICAgICAgICAgICAgICAgICAgICJkaWRfdXNlX3N1Z2dlc3RlZF9uYW1lIjogImZhbHNlIiwKICAgICAgICAgICAgICAgICAgICAidXNlX2N1c3RvbV9nZW5kZXIiOiAiIiwKICAgICAgICAgICAgICAgICAgICAiZ3VpZCI6ICIiLAogICAgICAgICAgICAgICAgICAgICJwcmVfZm9ybV9zdGVwIjogIiIsfSkKICAgICAgICAgICAgICAgIGdldHQgPSBzZWxmLnNlcy5wb3N0KCdodHRwczovL20uZmFjZWJvb2suY29tJytyZWZbJ2FjdGlvbiddLCBoZWFkZXJzPWhlYWRlcnMxLCBkYXRhPXNlbGYuZGF0YSkKICAgICAgICAgICAgICAgIGdldHRzID0gc2VsZi5zZXMuZ2V0KCdodHRwczovL20uZmFjZWJvb2suY29tL2xvZ2luL3NhdmUtZGV2aWNlLz9sb2dpbl9zb3VyY2U9YWNjb3VudF9jcmVhdGlvbiZsb2dnZXJfaWQ9Jytsb2dlcisnJmFwcF9pZD0xMDMnLCBoZWFkZXJzPWhlYWRlcnMxKQogICAgICAgICAgICAgICAgZGF0YTEgPSB7fQogICAgICAgICAgICAgICAgZGF0YTIgPSB7fQogICAgICAgICAgICAgICAgZGF0YTMgPSB7fQogICAgICAgICAgICAgICAgY29rID0gc2VsZi5zZXMuY29va2llcy5nZXRfZGljdCgpCiAgICAgICAgICAgICAgICBpZiAnY2hlY2twb2ludCcgaW4gZ2V0dHMudXJsOgogICAgICAgICAgICAgICAgICAgIGNwLmFwcGVuZChlbWFpbCtwYXNzdykKICAgICAgICAgICAgICAgIGRibCA9IFsnZmJfZHRzZycsICdqYXpvZXN0JywgJ2Zsb3cnLCAnbmV4dCcsICdudXhfc291cmNlJ10KICAgICAgICAgICAgICAgIGZvciB4IGluIEJlYXV0aWZ1bFNvdXAoZ2V0dHMudGV4dCwgJ2h0bWwucGFyc2VyJykuZmluZF9hbGwoJ2Zvcm0nLCB7J21ldGhvZCc6ICdwb3N0J30pOgogICAgICAgICAgICAgICAgICAgIGlmICcvbG9naW4vZGV2aWNlLWJhc2VkL3VwZGF0ZS1ub25jZS8nIGluIHN0cih4KToKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHYgaW4geCgnaW5wdXQnKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHYuZ2V0KCduYW1lJykgaW4gZGJsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTEudXBkYXRlKHt2LmdldCgnbmFtZScpOnYuZ2V0KCd2YWx1ZScpfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTEudXBkYXRlKHsnc3VibWl0JzogJ09LJ30pCiAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gc2VsZi5zZXMucG9zdCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbScreC5nZXQoJ2FjdGlvbicpLCBoZWFkZXJzPWhlYWRlcnMxLCBkYXRhPWRhdGExKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgeCBpbiBCZWF1dGlmdWxTb3VwKHBvLnRleHQsICdodG1sLnBhcnNlcicpLmZpbmRfYWxsKCdmb3JtJywgeydtZXRob2QnOiAncG9zdCd9KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdjb25maXJtYXRpb25fZXZlbnRfbG9jYXRpb249Y2xpZmYnIGluIHN0cih4KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdiBpbiB4KCdpbnB1dCcpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB2LmdldCgnbmFtZScpIGluIGRibDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhMi51cGRhdGUoe3YuZ2V0KCduYW1lJyk6di5nZXQoJ3ZhbHVlJyl9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlID0gaW5ib3goc2Vzc2lvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhMi51cGRhdGUoeydjJzogY29kZSwgJ3N1Ym1pdCc6ICdDb25maXJtJ30pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV4ID0gc2VsZi5zZXMucG9zdCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbScreC5nZXQoJ2FjdGlvbicpLCBoZWFkZXJzPWhlYWRlcnMxLCBkYXRhPWRhdGEyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdjaGVja3BvaW50JyBpbiByZXgudXJsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2sgPSBzZWxmLnNlcy5jb29raWVzLmdldF9kaWN0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3AuYXBwZW5kKGVtYWlsK3Bhc3N3KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNva2kgPSAoIjsiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBzZWxmLnNlcy5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2sgPSBzZWxmLnNlcy5jb29raWVzLmdldF9kaWN0KCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidcclx4MWJbMzg7NTs0Nm17QX1be0d94Ly6IPCShpzwnZmz8J2ahy3wnZm58J2ZsPCdmbzwnZm48J2ZuyDwkoacIOC8uy1PS/Cfkol7QX1de0d9ICcrY29rWydjX3VzZXInXSsnIHwgJytwYXNzdysnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZidccntSfVt7R31DT09LSUV7Un1de0d94pSBe1J9PntCVX0gJytjb2tpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5leCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oIi9zZGNhcmQv4Ly6IPCShpzwnZmz8J2ahy3wnZm58J2ZsPCdmbzwnZm48J2ZuyDwkoacIOC8uy1BVVRPLUNPT0tJRS50eHQiLCJhIikud3JpdGUoY29rWydjX3VzZXInXSsifCIrcGFzc3crInwiK2Nva2krIlxuIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC/gvLog8JKGnPCdmbPwnZqHLfCdmbnwnZmw8J2ZvPCdmbjwnZm7IPCShpwg4Ly7LUFVVE8tVUlELnR4dCcsJ2EnKS53cml0ZShjb2tbJ2NfdXNlciddKyd8JytwYXNzdysnXG4nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvay5hcHBlbmQoZW1haWwrcGFzc3cpCiAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcGFzcwoKICAgICAgICBwcmludCAoJycpCiAgICAgICAgbGluZXgoKQogICAgICAgIHByaW50IChmJ3tBfVt7Un09e0F9XSB7R31UT1RBTCBPSyBJRCB7Un06e0d9ICcrc3RyKGxlbihvaykpKQogICAgICAgIHByaW50IChmJ3tBfVt7Un09e0F9XSB7R31UT1RBTCBDUCBJRCB7Un06ICcrc3RyKGxlbihjcCkpKQogICAgICAgIGxpbmV4KCkKCm1lbnUoKQ=='))